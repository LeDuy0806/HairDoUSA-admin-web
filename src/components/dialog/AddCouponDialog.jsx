import FormNormalField from '@/components/common/FormNormalField';
import {Button} from '@/components/ui/button';
import {Checkbox} from '@/components/ui/checkbox';
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {Separator} from '@/components/ui/separator';
import {COUPON_TYPE} from '@/constants/value';

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {cn} from '@/lib/utils';
import {
  useCreateCouponMutation,
  useUpdateCouponMutation,
} from '@/services/coupon';
import {zodResolver} from '@hookform/resolvers/zod';
import {DialogClose, DialogDescription} from '@radix-ui/react-dialog';
import {AlertCircle, PencilLine, PlusIcon} from 'lucide-react';
import moment from 'moment-timezone';
import {useEffect, useState} from 'react';
import {useForm} from 'react-hook-form';
import {toast} from 'sonner';
import {z} from 'zod';
import {Alert, AlertDescription, AlertTitle} from '../ui/alert';
import {Input} from '../ui/input';

const AddCouponDialog = ({isEdit, data}) => {
  const [open, setOpen] = useState(false);
  const [discountType, setDiscountType] = useState(COUPON_TYPE.FIXED);
  const [commonError, setCommonError] = useState(null);

  useEffect(() => {
    if (data?.discountType) {
      setDiscountType(data.discountType);
    }
  }, [data?.discountType]);

  const formSchema = z
    .object({
      name: z.string().nonempty('Please enter coupon name'),
      discountValue: z.coerce
        .number({
          required_error: 'Please enter discount value',
          invalid_type_error: 'Please enter discount value',
        })
        .nonnegative('Discount value can not be negative'),
      usageLimit: z.coerce
        .number({
          required_error: 'Please enter usage limit',
          invalid_type_error: 'Please enter discount value',
        })
        .nonnegative('Usage limit can not be negative'),
      minAmount: z.coerce
        .number({
          required_error: 'Please enter minimum amount',
          invalid_type_error: 'Please enter minimum amount',
        })
        .nonnegative('Minimum amount can not be negative'),
      maxUsagePerUser: z.coerce
        .number({
          required_error: 'Please enter maximum usage per user',
          invalid_type_error: 'Please enter maximum usage per user',
        })
        .min(1, 'Maximum usage per user must be greater than 0'),
      description: z.string().max(100, {
        message: 'Description must be less than 100 characters',
      }),
      code: z.string().max(30, {
        message: 'Coupon code must be less than 30 characters',
      }),
      validFrom: z.string().nonempty('Please pick a valid from date'),
      validUntil: z.string().nonempty('Please pick an expired date'),
      isAutoGeneratedCode: z.boolean().optional().default(false),
      // isPermanent: z.boolean().optional().default(false),
    })
    .refine(
      data => {
        const discountValue = Number(data.discountValue);

        // For percentage: must be between 1-100
        if (discountType === COUPON_TYPE.PERCENTAGE) {
          return discountValue >= 1 && discountValue <= 100;
        }

        // For fixed amount: must be non-negative
        return discountValue >= 0;
      },
      {
        message:
          discountType === COUPON_TYPE.PERCENTAGE
            ? 'Percentage must be between 1-100%'
            : 'Amount must be a non-negative number',
        path: ['discountValue'],
      },
    )
    .refine(
      data => {
        // Skip validation if either date is missing
        if (!data.validFrom || !data.validUntil) return true;

        // Compare dates - expiredDate must be after validFromDate
        return data.validUntil > data.validFrom;
      },
      {
        message: 'Expired date must be after valid from date',
        path: ['validUntil'],
      },
    )
    .refine(
      data => {
        return data.isAutoGeneratedCode || data.code || data.code.trim() !== '';
      },
      {
        message: 'Please enter coupon code',
        path: ['code'],
      },
    )
    .refine(
      data => {
        if (discountType === COUPON_TYPE.FIXED) {
          return data.minAmount >= data.discountValue;
        }
        return true;
      },
      {
        message:
          'Minimum amount must be greater than or equal to the discount value',
        path: ['minAmount'],
      },
    );

  const tomorrow = moment().add(1, 'day');
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      discountType: COUPON_TYPE.PERCENTAGE,
      discountValue: 1,
      usageLimit: 10,
      minAmount: 0,
      description: '',
      code: '',
      isAutoGeneratedCode: false,
      // isPermanent: false,
      validFrom: moment().format('YYYY-MM-DD'),
      validUntil: moment(tomorrow).format('YYYY-MM-DD'),
      maxUsagePerUser: 1,
    },
  });

  useEffect(() => {
    if (data) {
      form.reset({
        ...data,
        validFrom: moment(data.validFrom ?? new Date()).format('YYYY-MM-DD'),
        validUntil: moment(data.validUntil ?? tomorrow).format('YYYY-MM-DD'),
      });
    }
  }, [data]);

  useEffect(() => {
    form.setValue('discountType', discountType);
  }, [discountType]);

  const {
    discountValue,
    code,
    description,
    isAutoGeneratedCode,
    // isPermanent,
    name,
    usageLimit,
    validFrom,
    validUntil,
    minAmount,
    maxUsagePerUser,
  } = form.watch();

  useEffect(() => {
    if (commonError) {
      setCommonError(null);
    }
  }, [
    discountValue,
    code,
    description,
    isAutoGeneratedCode,
    // isPermanent,
    name,
    usageLimit,
    validFrom,
    validUntil,
    minAmount,
    maxUsagePerUser,
  ]);

  const createCouponMutation = useCreateCouponMutation();
  const updateCouponMutation = useUpdateCouponMutation(data?._id);

  const loading =
    createCouponMutation.isPending || updateCouponMutation.isPending;

  const onSubmit = async values => {
    const handler = isEdit ? updateCouponMutation : createCouponMutation;

    const generatedCodeFromName = values.name
      .toUpperCase()
      .replace(/[^a-zA-Z0-9]/g, '')
      .slice(0, 10);

    const code =
      values.isAutoGeneratedCode && !isEdit
        ? generatedCodeFromName
        : values.code;

    handler.mutate(
      {
        ...values,
        code,
        discountType,
        validFrom: moment(values.validFrom).toISOString(true),
        validUntil: moment(values.validUntil).toISOString(true),
      },
      {
        onSuccess: res => {
          if (res.success) {
            form.reset();
            setOpen(false);
            toast.success(res.message);
          } else {
            setCommonError(res.message);
          }
        },
        onError: err => {
          setCommonError(
            err?.response?.data?.message || 'Something went wrong',
          );
        },
      },
    );
  };

  const handleOpenChanged = open => {
    setOpen(open);
    if (!open) {
      form.reset();
    }
  };

  const handleAutoGeneratedChange = checked => {
    form.setValue('isAutoGeneratedCode', checked);

    if (checked) {
      form.clearErrors('code');
    } else {
      form.trigger('code');
    }
  };

  return (
    <Dialog open={open} onOpenChange={handleOpenChanged}>
      <DialogTrigger asChild>
        <Button variant={isEdit ? 'outline' : 'default'}>
          {isEdit ? <PencilLine /> : <PlusIcon />}
          {isEdit ? 'Edit' : 'Add New Coupon'}
        </Button>
      </DialogTrigger>
      <DialogContent className="flex max-h-[80vh] flex-col gap-0 overflow-hidden p-0 sm:max-h-[90vh]">
        <DialogHeader className="px-6 py-4">
          <DialogTitle>{isEdit ? 'Edit' : 'Add New'} Coupon</DialogTitle>
          <DialogDescription>
            Please add a new coupon by these information.
          </DialogDescription>
        </DialogHeader>
        <div className="flex-1 overflow-y-auto px-6 py-4">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-3">
              <FormNormalField
                form={form}
                name="name"
                label="Coupon Name"
                placeholder="Enter coupon name"
                required
              />

              <FormField
                control={form.control}
                name="discountValue"
                render={({field}) => (
                  <FormItem className="gap-1">
                    <div className="grid grid-cols-5 items-center gap-4">
                      <FormLabel className="col-span-2">
                        Discount Amount <span className="text-red-500">*</span>
                      </FormLabel>
                      <FormControl className="col-span-3">
                        <div className="relative flex w-full items-center">
                          <Input
                            {...field}
                            type="number"
                            placeholder="Enter discount amount"
                            className={cn(
                              'pr-12 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none',
                              form.formState.errors['discountValue'] &&
                                'border-destructive focus-visible:ring-destructive',
                            )}
                          />
                          <Select
                            value={discountType}
                            onValueChange={setDiscountType}
                            defaultValue={COUPON_TYPE.FIXED}>
                            <SelectTrigger className="absolute top-0 right-0 w-12 cursor-pointer border-0 bg-transparent px-2">
                              <SelectValue placeholder="$" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value={COUPON_TYPE.FIXED}>
                                $
                              </SelectItem>
                              <SelectItem value={COUPON_TYPE.PERCENTAGE}>
                                %
                              </SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </FormControl>
                    </div>
                    <div className="grid grid-cols-5 items-center gap-4">
                      <div className="col-span-2" />
                      <FormMessage className="col-span-3" />
                    </div>
                  </FormItem>
                )}
              />

              <FormNormalField
                form={form}
                name="usageLimit"
                label="Usage Limit"
                placeholder="Enter coupon usage limit"
                type="number"
                required
              />
              <FormNormalField
                form={form}
                name="minAmount"
                label="Minimum Amount"
                placeholder="Enter minimum amount"
                type="number"
                required
              />
              <FormNormalField
                form={form}
                name="maxUsagePerUser"
                label="Max Usage Per User"
                placeholder="Enter max usage per user"
                type="number"
                required
              />
              <FormNormalField
                form={form}
                name="description"
                label="Description"
                placeholder="Enter description"
              />
              <FormNormalField
                form={form}
                name="code"
                label="Coupon Code"
                placeholder="Enter coupon code"
                disabled={form.watch('isAutoGeneratedCode')}
                required
              />
              {!isEdit && (
                <FormField
                  control={form.control}
                  name="isAutoGeneratedCode"
                  render={({field}) => (
                    <FormItem>
                      <FormControl>
                        <div className="flex items-center gap-2">
                          <Checkbox
                            id="isAutoGeneratedCode"
                            checked={field.value}
                            onCheckedChange={checked => {
                              field.onChange(checked);
                              handleAutoGeneratedChange(checked);
                            }}
                          />
                          <label
                            htmlFor="isAutoGeneratedCode"
                            className="text-sm font-medium">
                            Auto generate coupon code
                          </label>
                        </div>
                      </FormControl>
                    </FormItem>
                  )}
                />
              )}
              <Separator className="my-3" />

              <FormField
                control={form.control}
                name="validFrom"
                render={({field}) => (
                  <FormItem className="gap-1">
                    <div className="grid grid-cols-5 items-center gap-4">
                      <FormLabel className="col-span-2">
                        Valid from <span className="text-red-500">*</span>
                      </FormLabel>
                      <FormControl className="col-span-3">
                        <div className="relative">
                          <Input {...field} type="date" className="w-full" />
                        </div>
                      </FormControl>
                    </div>
                    <div className="grid grid-cols-5 items-center gap-4">
                      <div className="col-span-2" />
                      <FormMessage className="col-span-3" />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="validUntil"
                render={({field}) => (
                  <FormItem className="gap-1">
                    <div className="grid grid-cols-5 items-center gap-4">
                      <FormLabel className="col-span-2">
                        Expired Date <span className="text-red-500">*</span>
                      </FormLabel>
                      <FormControl className="col-span-3">
                        <div className="relative">
                          <Input {...field} type="date" className="w-full" />
                        </div>
                      </FormControl>
                    </div>
                    <div className="grid grid-cols-5 items-center gap-4">
                      <div className="col-span-2" />
                      <FormMessage className="col-span-3" />
                    </div>
                  </FormItem>
                )}
              />

              {commonError && (
                <Alert
                  variant="destructive"
                  className="border-red-500 bg-red-50/50">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{commonError}</AlertDescription>
                </Alert>
              )}

              <DialogFooter className="mt-8 justify-end">
                <DialogClose asChild>
                  <Button type="button" variant="ghost">
                    Cancel
                  </Button>
                </DialogClose>
                <Button type="submit" isLoading={loading}>
                  {isEdit ? 'Save' : 'Create'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default AddCouponDialog;
