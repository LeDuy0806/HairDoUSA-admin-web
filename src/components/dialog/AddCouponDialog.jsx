import FormNormalField from '@/components/common/FormNormalField';
import {Button} from '@/components/ui/button';
import {Checkbox} from '@/components/ui/checkbox';
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {Separator} from '@/components/ui/separator';
import {COUPON_TYPE} from '@/constants/value';

import {
  useCreateCouponMutation,
  useUpdateCouponMutation,
} from '@/services/coupon';
import {zodResolver} from '@hookform/resolvers/zod';
import {DialogClose} from '@radix-ui/react-dialog';
import {AlertCircle, PencilLine, PlusIcon} from 'lucide-react';
import moment from 'moment-timezone';
import {useEffect, useState} from 'react';
import {useForm} from 'react-hook-form';
import {toast} from 'sonner';
import {z} from 'zod';
import {Alert, AlertDescription, AlertTitle} from '../ui/alert';
import {Input} from '../ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '../ui/select';

const AddCouponDialog = ({isEdit, data}) => {
  const [open, setOpen] = useState(false);
  const [discountType, setDiscountType] = useState(COUPON_TYPE.FIXED);
  const [commonError, setCommonError] = useState(null);

  const formSchema = z
    .object({
      name: z.string().nonempty('Please enter coupon name'),
      discountValue: z.coerce
        .number()
        .nonnegative("Discount value can't be negative"),
      usageLimit: z.coerce
        .number()
        .nonnegative("Usage limit can't be negative"),
      description: z.string().max(100, {
        message: 'Description must be less than 100 characters',
      }),
      code: z.string().max(30, {
        message: 'Coupon code must be less than 30 characters',
      }),
      validFrom: z.string().nonempty('Please pick a valid from date'),
      validUntil: z.string().nonempty('Please pick an expired date'),
      isAutoGeneratedCode: z.boolean().optional().default(false),
      isPermanent: z.boolean().optional().default(false),
    })
    .refine(
      data => {
        const discountValue = Number(data.discountValue);

        // For percentage: must be between 1-100
        if (discountType === COUPON_TYPE.PERCENTAGE) {
          return discountValue >= 1 && discountValue <= 100;
        }

        // For fixed amount: must be non-negative
        return discountValue >= 0;
      },
      {
        message:
          discountType === COUPON_TYPE.PERCENTAGE
            ? 'Percentage must be between 1-100%'
            : 'Amount must be a non-negative number',
        path: ['discountValue'],
      },
    )
    .refine(
      data => {
        // Skip validation if either date is missing
        if (!data.validFrom || !data.validUntil) return true;

        // Compare dates - expiredDate must be after validFromDate
        return data.validUntil > data.validFrom;
      },
      {
        message: 'Expired date must be after valid from date',
        path: ['validUntil'],
      },
    )
    .refine(
      data => {
        return data.isAutoGeneratedCode || data.code || data.code.trim() !== '';
      },
      {
        message: 'Please enter coupon code',
        path: ['code'],
      },
    );

  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      discountValue: '',
      discountType: COUPON_TYPE.PERCENTAGE,
      description: '',
      code: '',
      isAutoGeneratedCode: false,
      isPermanent: false,
      validFrom: moment().format('YYYY-MM-DD'),
      validUntil: moment().format('YYYY-MM-DD'),
    },
  });

  useEffect(() => {
    if (data) {
      form.reset({
        ...data,
        validFrom: moment(data.validFrom ?? new Date()).format('YYYY-MM-DD'),
        validUntil: moment(data.validUntil ?? new Date()).format('YYYY-MM-DD'),
      });
    }
  }, [data]);

  useEffect(() => {
    form.setValue('discountType', discountType);
  }, [discountType]);

  const {
    discountValue,
    code,
    description,
    isAutoGeneratedCode,
    isPermanent,
    name,
    usageLimit,
    validFrom,
    validUntil,
  } = form.watch();

  useEffect(() => {
    if (commonError) {
      setCommonError(null);
    }
  }, [
    discountValue,
    code,
    description,
    isAutoGeneratedCode,
    isPermanent,
    name,
    usageLimit,
    validFrom,
    validUntil,
  ]);

  const createCouponMutation = useCreateCouponMutation();
  const updateCouponMutation = useUpdateCouponMutation(data?._id);

  const loading =
    createCouponMutation.isPending || updateCouponMutation.isPending;

  const onSubmit = async values => {
    const handler = isEdit ? updateCouponMutation : createCouponMutation;

    const generatedCodeFromName = values.name
      .toUpperCase()
      .replace(/[^a-z0-9]/g, '')
      .slice(0, 10);

    const code = !isEdit ? generatedCodeFromName : values.code;

    handler.mutate(
      {
        ...values,
        code,
        discountType,
        validFrom: moment(values.validFrom).toISOString(),
        validUntil: moment(values.validUntil).toISOString(),
      },
      {
        onSuccess: res => {
          if (res.success) {
            form.reset();
            setOpen(false);
            toast.success(res.message);
          } else {
            setCommonError(res.message);
          }
        },
        onError: err => {
          setCommonError(
            err?.response?.data?.message || 'Something went wrong',
          );
        },
      },
    );
  };

  const handleOpenChanged = open => {
    setOpen(open);
    if (!open) {
      form.reset();
    }
  };

  const handleAutoGeneratedChange = checked => {
    form.setValue('isAutoGeneratedCode', checked);

    if (checked) {
      form.clearErrors('code');
    } else {
      form.trigger('code');
    }
  };

  return (
    <Dialog open={open} onOpenChange={handleOpenChanged}>
      <DialogTrigger asChild>
        <Button variant={isEdit ? 'outline' : 'default'}>
          {isEdit ? <PencilLine /> : <PlusIcon />}
          {isEdit ? 'Edit' : 'Add New Coupon'}
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader className="mb-4">
          <DialogTitle>{isEdit ? 'Edit' : 'Add New'} Coupon</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-2">
            <FormNormalField
              form={form}
              name="name"
              label="Coupon Name"
              placeholder="Enter coupon name"
            />

            <FormField
              control={form.control}
              name="discountValue"
              render={({field}) => (
                <FormItem className="gap-1">
                  <div className="grid grid-cols-5 items-center gap-4">
                    <FormLabel className="col-span-2">
                      Discount Amount
                    </FormLabel>
                    <FormControl className="col-span-3">
                      <div className="relative flex w-full items-center">
                        <Input
                          {...field}
                          type="number"
                          placeholder="Enter discount amount"
                        />
                        <Select
                          value={discountType}
                          onValueChange={setDiscountType}
                          defaultValue={COUPON_TYPE.FIXED}>
                          <SelectTrigger className="absolute top-0 right-0 w-12 cursor-pointer border-0 bg-transparent px-2">
                            <SelectValue placeholder="$" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value={COUPON_TYPE.FIXED}>$</SelectItem>
                            <SelectItem value={COUPON_TYPE.PERCENTAGE}>
                              %
                            </SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </FormControl>
                  </div>
                  <div className="grid grid-cols-5 items-center gap-4">
                    <div className="col-span-2" />
                    <FormMessage className="col-span-3" />
                  </div>
                </FormItem>
              )}
            />

            <FormNormalField
              form={form}
              name="usageLimit"
              label="Usage Limit"
              placeholder="Enter coupon usage limit"
              type="number"
            />
            <FormNormalField
              form={form}
              name="description"
              label="Description"
              placeholder="Enter description"
            />
            <FormNormalField
              form={form}
              name="code"
              label="Coupon Code"
              placeholder="Enter coupon code"
              disabled={form.watch('isAutoGeneratedCode')}
            />
            {!isEdit && (
              <FormField
                control={form.control}
                name="isAutoGeneratedCode"
                render={({field}) => (
                  <FormItem>
                    <FormControl>
                      <div className="flex items-center gap-2">
                        <Checkbox
                          id="isAutoGeneratedCode"
                          checked={field.value}
                          onCheckedChange={checked => {
                            field.onChange(checked);
                            handleAutoGeneratedChange(checked);
                          }}
                        />
                        <label
                          htmlFor="isAutoGeneratedCode"
                          className="text-sm font-medium">
                          Auto generate coupon code
                        </label>
                      </div>
                    </FormControl>
                  </FormItem>
                )}
              />
            )}
            <Separator className="my-3" />

            <FormField
              control={form.control}
              name="validFrom"
              render={({field}) => (
                <FormItem className="gap-1">
                  <div className="grid grid-cols-5 items-center gap-4">
                    <FormLabel className="col-span-2">Valid from</FormLabel>
                    <FormControl className="col-span-3">
                      <div className="relative">
                        <Input {...field} type="date" className="w-full" />
                      </div>
                    </FormControl>
                  </div>
                  <div className="grid grid-cols-5 items-center gap-4">
                    <div className="col-span-2" />
                    <FormMessage className="col-span-3" />
                  </div>
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="validUntil"
              render={({field}) => (
                <FormItem className="gap-1">
                  <div className="grid grid-cols-5 items-center gap-4">
                    <FormLabel className="col-span-2">Expired Date</FormLabel>
                    <FormControl className="col-span-3">
                      <div className="relative">
                        <Input {...field} type="date" className="w-full" />
                      </div>
                    </FormControl>
                  </div>
                  <div className="grid grid-cols-5 items-center gap-4">
                    <div className="col-span-2" />
                    <FormMessage className="col-span-3" />
                  </div>
                </FormItem>
              )}
            />

            {commonError && (
              <Alert
                variant="destructive"
                className="border-red-500 bg-red-50/50">
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{commonError}</AlertDescription>
              </Alert>
            )}

            <DialogFooter className="justify-end gap-2">
              <Button type="submit" isLoading={loading}>
                {isEdit ? 'Save' : 'Create'}
              </Button>

              <DialogClose asChild>
                <Button type="button" variant="ghost">
                  Cancel
                </Button>
              </DialogClose>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

export default AddCouponDialog;
